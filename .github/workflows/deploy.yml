name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # AWS 認証
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}

      # ECR ログイン
      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr # outputs で参照するために id を設定

      # キャッシュクリア
      - name: Clear npm cache
        run: npm ci

      # Docker イメージを build・push する
      - name: build and push docker image to ecr
        env:
          # ECR レジストリを `aws-actions/amazon-ecr-login` アクションの `outputs.registry` から取得
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # イメージを push する ECR リポジトリ名
          REPOSITORY: "todo-app-frontend-image"
          # 任意のイメージタグ
          # 今回は Git のコミットハッシュにしておく
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build . --tag ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
      
      # ECSタスクの更新
      - name: Update ECS task definition
        env:
          CLUSTER_NAME: "todo-app-frontend-cluster"
          SERVICE_NAME: "todo-app-service"
          TASK_DEFINITION_FAMILY: "todo-app-frontend-definition"
        run: |
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $TASK_DEFINITION_FAMILY:$GITHUB_SHA

      # - name: Update ECS service
      #   id: update-service
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     cluster: todo-app-frontend-cluster
      #     service: todo-app-service
      #     task-definition: ${{ secrets.AWS_ECR_PUSH_ARN }}
      #     image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     wait-for-service-stability: true
      #   env:
      #     AWS_REGION: ${{ secrets.AWS_REGION }}
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
